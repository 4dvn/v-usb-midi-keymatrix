
midimega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000ad6  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800072  00800072  00000b7c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000232  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000103b  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ea  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051f  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ac  00000000  00000000  000033fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000039a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	a6 c0       	rjmp	.+332    	; 0x150 <__vector_1>
   4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
   6:	8a c0       	rjmp	.+276    	; 0x11c <__bad_interrupt>
   8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
   a:	88 c0       	rjmp	.+272    	; 0x11c <__bad_interrupt>
   c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
   e:	86 c0       	rjmp	.+268    	; 0x11c <__bad_interrupt>
  10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
  12:	84 c0       	rjmp	.+264    	; 0x11c <__bad_interrupt>
  14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
  16:	82 c0       	rjmp	.+260    	; 0x11c <__bad_interrupt>
  18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
  1a:	80 c0       	rjmp	.+256    	; 0x11c <__bad_interrupt>
  1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
  1e:	7e c0       	rjmp	.+252    	; 0x11c <__bad_interrupt>
  20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
  22:	7c c0       	rjmp	.+248    	; 0x11c <__bad_interrupt>
  24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>

00000026 <usbDescriptorString0>:
  26:	04 03 09 04                                         ....

0000002a <usbDescriptorStringVendor>:
  2a:	22 03 77 00 77 00 77 00 2e 00 63 00 72 00 79 00     ".w.w.w...c.r.y.
  3a:	70 00 74 00 6f 00 6d 00 79 00 73 00 2e 00 64 00     p.t.o.m.y.s...d.
  4a:	65 00                                               e.

0000004c <usbDescriptorStringDevice>:
  4c:	16 03 56 00 2d 00 55 00 53 00 42 00 2d 00 4d 00     ..V.-.U.S.B.-.M.
  5c:	49 00 44 00 49 00                                   I.D.I.

00000062 <modmask>:
  62:	01 02 04 08 10 20                                   ..... 

00000068 <extrows>:
  68:	01 02                                               ..

0000006a <columns>:
  6a:	01 02 10 20 40                                      ... @

0000006f <deviceDescrMIDI>:
  6f:	12 01 10 01 00 00 00 08 c0 16 e4 05 01 00 01 02     ................
  7f:	00 01                                               ..

00000081 <configDescrMIDI>:
  81:	09 02 65 00 02 01 00 80 32 09 04 00 00 00 01 01     ..e.....2.......
  91:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  a1:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  b1:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  c1:	09 24 03 02 04 01 01 01 00 09 05 01 03 08 00 0a     .$..............
  d1:	00 00 05 25 01 01 01 09 05 81 03 08 00 0a 00 00     ...%............
  e1:	05 25 01 01 03                                      .%...

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d4 e0       	ldi	r29, 0x04	; 4
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e6 ed       	ldi	r30, 0xD6	; 214
  fa:	fa e0       	ldi	r31, 0x0A	; 10
  fc:	02 c0       	rjmp	.+4      	; 0x102 <.do_copy_data_start>

000000fe <.do_copy_data_loop>:
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0

00000102 <.do_copy_data_start>:
 102:	a2 37       	cpi	r26, 0x72	; 114
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <.do_copy_data_loop>

00000108 <__do_clear_bss>:
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	a2 e7       	ldi	r26, 0x72	; 114
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	ac 3a       	cpi	r26, 0xAC	; 172
 114:	b1 07       	cpc	r27, r17
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	77 d3       	rcall	.+1774   	; 0x808 <main>
 11a:	db c4       	rjmp	.+2486   	; 0xad2 <_exit>

0000011c <__bad_interrupt>:
 11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <usbCrc16>:
 11e:	a8 2f       	mov	r26, r24
 120:	b9 2f       	mov	r27, r25
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	50 ea       	ldi	r21, 0xA0	; 160
 12a:	60 95       	com	r22

0000012c <crcByteLoop>:
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	58 f4       	brcc	.+22     	; 0x146 <crcReady>
 130:	2d 91       	ld	r18, X+
 132:	38 ef       	ldi	r19, 0xF8	; 248
 134:	82 27       	eor	r24, r18

00000136 <crcBitLoop>:
 136:	97 95       	ror	r25
 138:	87 95       	ror	r24
 13a:	10 f0       	brcs	.+4      	; 0x140 <crcNoXor>
 13c:	84 27       	eor	r24, r20
 13e:	95 27       	eor	r25, r21

00000140 <crcNoXor>:
 140:	3f 5f       	subi	r19, 0xFF	; 255
 142:	c8 f3       	brcs	.-14     	; 0x136 <crcBitLoop>
 144:	f3 cf       	rjmp	.-26     	; 0x12c <crcByteLoop>

00000146 <crcReady>:
 146:	08 95       	ret

00000148 <usbCrc16Append>:
 148:	ea df       	rcall	.-44     	; 0x11e <usbCrc16>
 14a:	8d 93       	st	X+, r24
 14c:	9d 93       	st	X+, r25
 14e:	08 95       	ret

00000150 <__vector_1>:
 150:	cf 93       	push	r28
 152:	cf b7       	in	r28, 0x3f	; 63
 154:	cf 93       	push	r28

00000156 <waitForJ>:
 156:	c3 95       	inc	r28
 158:	83 9b       	sbis	0x10, 3	; 16
 15a:	e9 f7       	brne	.-6      	; 0x156 <waitForJ>

0000015c <waitForK>:
 15c:	83 9b       	sbis	0x10, 3	; 16
 15e:	09 c0       	rjmp	.+18     	; 0x172 <foundK>
 160:	83 9b       	sbis	0x10, 3	; 16
 162:	07 c0       	rjmp	.+14     	; 0x172 <foundK>
 164:	83 9b       	sbis	0x10, 3	; 16
 166:	05 c0       	rjmp	.+10     	; 0x172 <foundK>
 168:	83 9b       	sbis	0x10, 3	; 16
 16a:	03 c0       	rjmp	.+6      	; 0x172 <foundK>
 16c:	83 9b       	sbis	0x10, 3	; 16
 16e:	01 c0       	rjmp	.+2      	; 0x172 <foundK>
 170:	a6 c0       	rjmp	.+332    	; 0x2be <sofError>

00000172 <foundK>:
 172:	df 93       	push	r29
 174:	c0 91 8f 00 	lds	r28, 0x008F
 178:	dd 27       	eor	r29, r29
 17a:	ca 56       	subi	r28, 0x6A	; 106
 17c:	df 4f       	sbci	r29, 0xFF	; 255
 17e:	83 9b       	sbis	0x10, 3	; 16
 180:	02 c0       	rjmp	.+4      	; 0x186 <haveTwoBitsK>
 182:	df 91       	pop	r29
 184:	eb cf       	rjmp	.-42     	; 0x15c <waitForK>

00000186 <haveTwoBitsK>:
 186:	2f 93       	push	r18
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	00 b3       	in	r16, 0x10	; 16
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	03 fb       	bst	r16, 3
 192:	20 f9       	bld	r18, 0
 194:	4f 93       	push	r20
 196:	3f 93       	push	r19
 198:	10 b3       	in	r17, 0x10	; 16
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	01 27       	eor	r16, r17
 19e:	03 fb       	bst	r16, 3
 1a0:	21 f9       	bld	r18, 1
 1a2:	3b e0       	ldi	r19, 0x0B	; 11
 1a4:	31 c0       	rjmp	.+98     	; 0x208 <rxbit2>

000001a6 <unstuff0>:
 1a6:	4e 7f       	andi	r20, 0xFE	; 254
 1a8:	01 2f       	mov	r16, r17
 1aa:	10 b3       	in	r17, 0x10	; 16
 1ac:	21 60       	ori	r18, 0x01	; 1
 1ae:	28 c0       	rjmp	.+80     	; 0x200 <didUnstuff0>

000001b0 <unstuff1>:
 1b0:	10 2f       	mov	r17, r16
 1b2:	4d 7f       	andi	r20, 0xFD	; 253
 1b4:	22 60       	ori	r18, 0x02	; 2
 1b6:	00 00       	nop
 1b8:	00 b3       	in	r16, 0x10	; 16
 1ba:	29 c0       	rjmp	.+82     	; 0x20e <didUnstuff1>

000001bc <unstuff2>:
 1bc:	4b 7f       	andi	r20, 0xFB	; 251
 1be:	24 60       	ori	r18, 0x04	; 4
 1c0:	01 2f       	mov	r16, r17
 1c2:	00 00       	nop
 1c4:	10 b3       	in	r17, 0x10	; 16
 1c6:	2b c0       	rjmp	.+86     	; 0x21e <didUnstuff2>

000001c8 <unstuff3>:
 1c8:	10 b3       	in	r17, 0x10	; 16
 1ca:	47 7f       	andi	r20, 0xF7	; 247
 1cc:	28 60       	ori	r18, 0x08	; 8
 1ce:	2a c0       	rjmp	.+84     	; 0x224 <didUnstuff3>

000001d0 <unstuff4>:
 1d0:	4f 7e       	andi	r20, 0xEF	; 239
 1d2:	00 b3       	in	r16, 0x10	; 16
 1d4:	20 61       	ori	r18, 0x10	; 16
 1d6:	2c c0       	rjmp	.+88     	; 0x230 <didUnstuff4>

000001d8 <unstuff5>:
 1d8:	4f 7d       	andi	r20, 0xDF	; 223
 1da:	10 b3       	in	r17, 0x10	; 16
 1dc:	20 62       	ori	r18, 0x20	; 32
 1de:	2f c0       	rjmp	.+94     	; 0x23e <didUnstuff5>

000001e0 <unstuff6>:
 1e0:	4f 7b       	andi	r20, 0xBF	; 191
 1e2:	00 b3       	in	r16, 0x10	; 16
 1e4:	20 64       	ori	r18, 0x40	; 64
 1e6:	32 c0       	rjmp	.+100    	; 0x24c <didUnstuff6>

000001e8 <rxLoop>:
 1e8:	42 27       	eor	r20, r18
 1ea:	00 b3       	in	r16, 0x10	; 16
 1ec:	49 93       	st	Y+, r20
 1ee:	4f ef       	ldi	r20, 0xFF	; 255
 1f0:	00 00       	nop
 1f2:	10 27       	eor	r17, r16
 1f4:	13 fb       	bst	r17, 3
 1f6:	20 f9       	bld	r18, 0
 1f8:	10 b3       	in	r17, 0x10	; 16
 1fa:	1c 70       	andi	r17, 0x0C	; 12
 1fc:	c9 f1       	breq	.+114    	; 0x270 <se0>
 1fe:	29 7f       	andi	r18, 0xF9	; 249

00000200 <didUnstuff0>:
 200:	91 f2       	breq	.-92     	; 0x1a6 <unstuff0>
 202:	01 27       	eor	r16, r17
 204:	03 fb       	bst	r16, 3
 206:	21 f9       	bld	r18, 1

00000208 <rxbit2>:
 208:	00 b3       	in	r16, 0x10	; 16
 20a:	23 7f       	andi	r18, 0xF3	; 243
 20c:	89 f2       	breq	.-94     	; 0x1b0 <unstuff1>

0000020e <didUnstuff1>:
 20e:	31 50       	subi	r19, 0x01	; 1
 210:	58 f1       	brcs	.+86     	; 0x268 <overflow>
 212:	10 27       	eor	r17, r16
 214:	13 fb       	bst	r17, 3
 216:	22 f9       	bld	r18, 2
 218:	10 b3       	in	r17, 0x10	; 16
 21a:	27 7e       	andi	r18, 0xE7	; 231
 21c:	79 f2       	breq	.-98     	; 0x1bc <unstuff2>

0000021e <didUnstuff2>:
 21e:	01 27       	eor	r16, r17
 220:	03 fb       	bst	r16, 3
 222:	23 f9       	bld	r18, 3

00000224 <didUnstuff3>:
 224:	2f 7c       	andi	r18, 0xCF	; 207
 226:	81 f2       	breq	.-96     	; 0x1c8 <unstuff3>
 228:	00 b3       	in	r16, 0x10	; 16
 22a:	10 27       	eor	r17, r16
 22c:	13 fb       	bst	r17, 3
 22e:	24 f9       	bld	r18, 4

00000230 <didUnstuff4>:
 230:	2f 79       	andi	r18, 0x9F	; 159
 232:	71 f2       	breq	.-100    	; 0x1d0 <unstuff4>
 234:	00 c0       	rjmp	.+0      	; 0x236 <didUnstuff4+0x6>
 236:	10 b3       	in	r17, 0x10	; 16
 238:	01 27       	eor	r16, r17
 23a:	03 fb       	bst	r16, 3
 23c:	25 f9       	bld	r18, 5

0000023e <didUnstuff5>:
 23e:	2f 73       	andi	r18, 0x3F	; 63
 240:	59 f2       	breq	.-106    	; 0x1d8 <unstuff5>
 242:	00 c0       	rjmp	.+0      	; 0x244 <didUnstuff5+0x6>
 244:	00 b3       	in	r16, 0x10	; 16
 246:	10 27       	eor	r17, r16
 248:	13 fb       	bst	r17, 3
 24a:	26 f9       	bld	r18, 6

0000024c <didUnstuff6>:
 24c:	22 30       	cpi	r18, 0x02	; 2
 24e:	40 f2       	brcs	.-112    	; 0x1e0 <unstuff6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <didUnstuff6+0x6>
 252:	10 b3       	in	r17, 0x10	; 16
 254:	01 27       	eor	r16, r17
 256:	03 fb       	bst	r16, 3
 258:	27 f9       	bld	r18, 7

0000025a <didUnstuff7>:
 25a:	24 30       	cpi	r18, 0x04	; 4
 25c:	28 f6       	brcc	.-118    	; 0x1e8 <rxLoop>

0000025e <unstuff7>:
 25e:	4f 77       	andi	r20, 0x7F	; 127
 260:	20 68       	ori	r18, 0x80	; 128
 262:	10 b3       	in	r17, 0x10	; 16
 264:	00 00       	nop
 266:	f9 cf       	rjmp	.-14     	; 0x25a <didUnstuff7>

00000268 <overflow>:
 268:	10 e4       	ldi	r17, 0x40	; 64
 26a:	1a bf       	out	0x3a, r17	; 58

0000026c <ignorePacket>:
 26c:	00 27       	eor	r16, r16
 26e:	1c c0       	rjmp	.+56     	; 0x2a8 <storeTokenAndReturn>

00000270 <se0>:
 270:	3b 50       	subi	r19, 0x0B	; 11
 272:	31 95       	neg	r19
 274:	c3 1b       	sub	r28, r19
 276:	d0 40       	sbci	r29, 0x00	; 0
 278:	10 e4       	ldi	r17, 0x40	; 64
 27a:	1a bf       	out	0x3a, r17	; 58
 27c:	08 81       	ld	r16, Y
 27e:	03 3c       	cpi	r16, 0xC3	; 195
 280:	11 f1       	breq	.+68     	; 0x2c6 <handleData>
 282:	0b 34       	cpi	r16, 0x4B	; 75
 284:	01 f1       	breq	.+64     	; 0x2c6 <handleData>
 286:	20 91 8d 00 	lds	r18, 0x008D
 28a:	19 81       	ldd	r17, Y+1	; 0x01
 28c:	11 0f       	add	r17, r17
 28e:	12 13       	cpse	r17, r18
 290:	ed cf       	rjmp	.-38     	; 0x26c <ignorePacket>
 292:	4a 81       	ldd	r20, Y+2	; 0x02
 294:	44 1f       	adc	r20, r20
 296:	09 36       	cpi	r16, 0x69	; 105
 298:	59 f1       	breq	.+86     	; 0x2f0 <handleIn>
 29a:	0d 32       	cpi	r16, 0x2D	; 45
 29c:	11 f0       	breq	.+4      	; 0x2a2 <handleSetupOrOut>
 29e:	01 3e       	cpi	r16, 0xE1	; 225
 2a0:	29 f7       	brne	.-54     	; 0x26c <ignorePacket>

000002a2 <handleSetupOrOut>:
 2a2:	4f 70       	andi	r20, 0x0F	; 15
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <storeTokenAndReturn>
 2a6:	04 2f       	mov	r16, r20

000002a8 <storeTokenAndReturn>:
 2a8:	00 93 94 00 	sts	0x0094, r16

000002ac <doReturn>:
 2ac:	3f 91       	pop	r19
 2ae:	4f 91       	pop	r20
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	2f 91       	pop	r18
 2b6:	df 91       	pop	r29
 2b8:	ca b7       	in	r28, 0x3a	; 58
 2ba:	c6 fd       	sbrc	r28, 6
 2bc:	4c cf       	rjmp	.-360    	; 0x156 <waitForJ>

000002be <sofError>:
 2be:	cf 91       	pop	r28
 2c0:	cf bf       	out	0x3f, r28	; 63
 2c2:	cf 91       	pop	r28
 2c4:	18 95       	reti

000002c6 <handleData>:
 2c6:	20 91 94 00 	lds	r18, 0x0094
 2ca:	22 23       	and	r18, r18
 2cc:	79 f3       	breq	.-34     	; 0x2ac <doReturn>
 2ce:	10 91 92 00 	lds	r17, 0x0092
 2d2:	11 23       	and	r17, r17
 2d4:	69 f5       	brne	.+90     	; 0x330 <sendNakAndReti>
 2d6:	34 30       	cpi	r19, 0x04	; 4
 2d8:	6a f1       	brmi	.+90     	; 0x334 <sendAckAndReti>
 2da:	30 93 92 00 	sts	0x0092, r19
 2de:	20 93 8e 00 	sts	0x008E, r18
 2e2:	10 91 8f 00 	lds	r17, 0x008F
 2e6:	3b e0       	ldi	r19, 0x0B	; 11
 2e8:	31 1b       	sub	r19, r17
 2ea:	30 93 8f 00 	sts	0x008F, r19
 2ee:	22 c0       	rjmp	.+68     	; 0x334 <sendAckAndReti>

000002f0 <handleIn>:
 2f0:	00 91 92 00 	lds	r16, 0x0092
 2f4:	01 30       	cpi	r16, 0x01	; 1
 2f6:	e4 f4       	brge	.+56     	; 0x330 <sendNakAndReti>
 2f8:	0a e5       	ldi	r16, 0x5A	; 90
 2fa:	4f 70       	andi	r20, 0x0F	; 15
 2fc:	49 f4       	brne	.+18     	; 0x310 <handleIn1>
 2fe:	30 91 60 00 	lds	r19, 0x0060
 302:	34 fd       	sbrc	r19, 4
 304:	19 c0       	rjmp	.+50     	; 0x338 <sendCntAndReti>
 306:	00 93 60 00 	sts	0x0060, r16
 30a:	c6 e7       	ldi	r28, 0x76	; 118
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	18 c0       	rjmp	.+48     	; 0x340 <usbSendAndReti>

00000310 <handleIn1>:
 310:	30 91 81 00 	lds	r19, 0x0081
 314:	34 fd       	sbrc	r19, 4
 316:	10 c0       	rjmp	.+32     	; 0x338 <sendCntAndReti>
 318:	00 93 81 00 	sts	0x0081, r16
 31c:	c2 e8       	ldi	r28, 0x82	; 130
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	0f c0       	rjmp	.+30     	; 0x340 <usbSendAndReti>

00000322 <stuffN1Delay>:
 322:	27 95       	ror	r18
 324:	a8 f4       	brcc	.+42     	; 0x350 <doExorN1>
 326:	51 50       	subi	r21, 0x01	; 1
 328:	a9 f4       	brne	.+42     	; 0x354 <commonN1>
 32a:	22 0f       	add	r18, r18
 32c:	00 00       	nop
 32e:	f9 cf       	rjmp	.-14     	; 0x322 <stuffN1Delay>

00000330 <sendNakAndReti>:
 330:	4a e5       	ldi	r20, 0x5A	; 90
 332:	03 c0       	rjmp	.+6      	; 0x33a <usbSendX3>

00000334 <sendAckAndReti>:
 334:	42 ed       	ldi	r20, 0xD2	; 210
 336:	01 c0       	rjmp	.+2      	; 0x33a <usbSendX3>

00000338 <sendCntAndReti>:
 338:	43 2f       	mov	r20, r19

0000033a <usbSendX3>:
 33a:	c4 e1       	ldi	r28, 0x14	; 20
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	32 e0       	ldi	r19, 0x02	; 2

00000340 <usbSendAndReti>:
 340:	11 b3       	in	r17, 0x11	; 17
 342:	1c 60       	ori	r17, 0x0C	; 12
 344:	93 9a       	sbi	0x12, 3	; 18
 346:	11 bb       	out	0x11, r17	; 17
 348:	02 b3       	in	r16, 0x12	; 18
 34a:	20 e4       	ldi	r18, 0x40	; 64
 34c:	1c e0       	ldi	r17, 0x0C	; 12
 34e:	5f 93       	push	r21

00000350 <doExorN1>:
 350:	01 27       	eor	r16, r17
 352:	56 e0       	ldi	r21, 0x06	; 6

00000354 <commonN1>:
 354:	02 bb       	out	0x12, r16	; 18
 356:	27 95       	ror	r18
 358:	20 f4       	brcc	.+8      	; 0x362 <doExorN2>
 35a:	51 50       	subi	r21, 0x01	; 1
 35c:	21 f4       	brne	.+8      	; 0x366 <commonN2>
 35e:	22 0f       	add	r18, r18
 360:	f9 cf       	rjmp	.-14     	; 0x354 <commonN1>

00000362 <doExorN2>:
 362:	01 27       	eor	r16, r17
 364:	56 e0       	ldi	r21, 0x06	; 6

00000366 <commonN2>:
 366:	00 00       	nop
 368:	3b 5a       	subi	r19, 0xAB	; 171
 36a:	02 bb       	out	0x12, r16	; 18
 36c:	d0 f2       	brcs	.-76     	; 0x322 <stuffN1Delay>

0000036e <stuff6Delay>:
 36e:	27 95       	ror	r18
 370:	28 f4       	brcc	.+10     	; 0x37c <doExor6>
 372:	51 50       	subi	r21, 0x01	; 1
 374:	29 f4       	brne	.+10     	; 0x380 <common6>
 376:	22 0f       	add	r18, r18
 378:	00 00       	nop
 37a:	f9 cf       	rjmp	.-14     	; 0x36e <stuff6Delay>

0000037c <doExor6>:
 37c:	01 27       	eor	r16, r17
 37e:	56 e0       	ldi	r21, 0x06	; 6

00000380 <common6>:
 380:	27 95       	ror	r18
 382:	02 bb       	out	0x12, r16	; 18
 384:	20 f4       	brcc	.+8      	; 0x38e <doExor7>
 386:	51 50       	subi	r21, 0x01	; 1
 388:	21 f4       	brne	.+8      	; 0x392 <common7>
 38a:	22 0f       	add	r18, r18
 38c:	f9 cf       	rjmp	.-14     	; 0x380 <common6>

0000038e <doExor7>:
 38e:	01 27       	eor	r16, r17
 390:	56 e0       	ldi	r21, 0x06	; 6

00000392 <common7>:
 392:	29 91       	ld	r18, Y+
 394:	33 23       	and	r19, r19
 396:	02 bb       	out	0x12, r16	; 18
 398:	21 f6       	brne	.-120    	; 0x322 <stuffN1Delay>
 39a:	03 7f       	andi	r16, 0xF3	; 243
 39c:	10 91 93 00 	lds	r17, 0x0093
 3a0:	11 0f       	add	r17, r17
 3a2:	c6 51       	subi	r28, 0x16	; 22
 3a4:	d0 40       	sbci	r29, 0x00	; 0
 3a6:	02 bb       	out	0x12, r16	; 18
 3a8:	11 f0       	breq	.+4      	; 0x3ae <skipAddrAssign>
 3aa:	10 93 8d 00 	sts	0x008D, r17

000003ae <skipAddrAssign>:
 3ae:	10 e4       	ldi	r17, 0x40	; 64
 3b0:	1a bf       	out	0x3a, r17	; 58
 3b2:	08 60       	ori	r16, 0x08	; 8
 3b4:	11 b3       	in	r17, 0x11	; 17
 3b6:	13 7f       	andi	r17, 0xF3	; 243
 3b8:	40 2f       	mov	r20, r16
 3ba:	43 7f       	andi	r20, 0xF3	; 243
 3bc:	5f 91       	pop	r21
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <skipAddrAssign+0x12>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <skipAddrAssign+0x14>
 3c2:	02 bb       	out	0x12, r16	; 18
 3c4:	11 bb       	out	0x11, r17	; 17
 3c6:	42 bb       	out	0x12, r20	; 18
 3c8:	71 cf       	rjmp	.-286    	; 0x2ac <doReturn>

000003ca <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 3ca:	85 b7       	in	r24, 0x35	; 53
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 3d0:	8b b7       	in	r24, 0x3b	; 59
 3d2:	80 64       	ori	r24, 0x40	; 64
 3d4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3d6:	8b e4       	ldi	r24, 0x4B	; 75
 3d8:	80 93 82 00 	sts	0x0082, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 3dc:	8a e5       	ldi	r24, 0x5A	; 90
 3de:	80 93 81 00 	sts	0x0081, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 3e2:	08 95       	ret

000003e4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 3e4:	1f 93       	push	r17
 3e6:	dc 01       	movw	r26, r24
 3e8:	16 2f       	mov	r17, r22
{
uchar   *p;
char    i;

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
 3ea:	80 91 81 00 	lds	r24, 0x0081
 3ee:	8e 31       	cpi	r24, 0x1E	; 30
 3f0:	e9 f0       	breq	.+58     	; 0x42c <usbSetInterrupt+0x48>
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 3f2:	80 91 81 00 	lds	r24, 0x0081
 3f6:	84 ff       	sbrs	r24, 4
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <usbSetInterrupt+0x24>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 3fa:	80 91 82 00 	lds	r24, 0x0082
 3fe:	98 e8       	ldi	r25, 0x88	; 136
 400:	89 27       	eor	r24, r25
 402:	80 93 82 00 	sts	0x0082, r24
 406:	03 c0       	rjmp	.+6      	; 0x40e <usbSetInterrupt+0x2a>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 408:	8a e5       	ldi	r24, 0x5A	; 90
 40a:	80 93 81 00 	sts	0x0081, r24
    }
    p = txStatus->buffer + 1;
    i = len;
 40e:	91 2f       	mov	r25, r17
 410:	e3 e8       	ldi	r30, 0x83	; 131
 412:	f0 e0       	ldi	r31, 0x00	; 0
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 414:	8d 91       	ld	r24, X+
 416:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	19 16       	cp	r1, r25
 41c:	dc f3       	brlt	.-10     	; 0x414 <usbSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
 41e:	83 e8       	ldi	r24, 0x83	; 131
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	61 2f       	mov	r22, r17
 424:	91 de       	rcall	.-734    	; 0x148 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 426:	1c 5f       	subi	r17, 0xFC	; 252
 428:	10 93 81 00 	sts	0x0081, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 42c:	1f 91       	pop	r17
 42e:	08 95       	ret

00000430 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 436:	60 91 92 00 	lds	r22, 0x0092
 43a:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 43c:	67 fd       	sbrc	r22, 7
 43e:	cb c0       	rjmp	.+406    	; 0x5d6 <__stack+0x177>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 440:	80 91 8f 00 	lds	r24, 0x008F
 444:	cc e0       	ldi	r28, 0x0C	; 12
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	c8 1b       	sub	r28, r24
 44a:	d1 09       	sbc	r29, r1
 44c:	ca 56       	subi	r28, 0x6A	; 106
 44e:	df 4f       	sbci	r29, 0xFF	; 255
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 450:	80 91 8e 00 	lds	r24, 0x008E
 454:	80 31       	cpi	r24, 0x10	; 16
 456:	18 f4       	brcc	.+6      	; 0x45e <usbPoll+0x2e>
        usbFunctionWriteOut(data, len);
 458:	ce 01       	movw	r24, r28
 45a:	57 d1       	rcall	.+686    	; 0x70a <usbFunctionWriteOut>
 45c:	ba c0       	rjmp	.+372    	; 0x5d2 <__stack+0x173>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 45e:	8d 32       	cpi	r24, 0x2D	; 45
 460:	09 f0       	breq	.+2      	; 0x464 <__stack+0x5>
 462:	a7 c0       	rjmp	.+334    	; 0x5b2 <__stack+0x153>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 464:	68 30       	cpi	r22, 0x08	; 8
 466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
 468:	b4 c0       	rjmp	.+360    	; 0x5d2 <__stack+0x173>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 46a:	83 ec       	ldi	r24, 0xC3	; 195
 46c:	80 93 76 00 	sts	0x0076, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 470:	8a e5       	ldi	r24, 0x5A	; 90
 472:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 476:	10 92 72 00 	sts	0x0072, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 47a:	98 81       	ld	r25, Y
 47c:	89 2f       	mov	r24, r25
 47e:	80 76       	andi	r24, 0x60	; 96
 480:	21 f0       	breq	.+8      	; 0x48a <__stack+0x2b>
            replyLen = usbFunctionSetup(data);
 482:	ce 01       	movw	r24, r28
 484:	29 d1       	rcall	.+594    	; 0x6d8 <usbFunctionSetup>
 486:	28 2f       	mov	r18, r24
 488:	81 c0       	rjmp	.+258    	; 0x58c <__stack+0x12d>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 48a:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
 48c:	3c 81       	ldd	r19, Y+4	; 0x04
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 48e:	10 92 7f 00 	sts	0x007F, r1
    SWITCH_START(rq->bRequest)
 492:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 494:	88 23       	and	r24, r24
 496:	81 f4       	brne	.+32     	; 0x4b8 <__stack+0x59>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
 498:	9f 71       	andi	r25, 0x1F	; 31
 49a:	92 30       	cpi	r25, 0x02	; 2
 49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
 49e:	31 38       	cpi	r19, 0x81	; 129
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__stack+0x51>
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
 4a2:	80 91 81 00 	lds	r24, 0x0081
 4a6:	8e 31       	cpi	r24, 0x1E	; 30
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <__stack+0x51>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 7f 00 	sts	0x007F, r24
#endif
        dataPtr[1] = 0;
 4b0:	10 92 80 00 	sts	0x0080, r1
 4b4:	22 e0       	ldi	r18, 0x02	; 2
 4b6:	63 c0       	rjmp	.+198    	; 0x57e <__stack+0x11f>
        len = 2;
#if USB_CFG_IMPLEMENT_HALT
    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	11 f0       	breq	.+4      	; 0x4c0 <__stack+0x61>
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	89 f4       	brne	.+34     	; 0x4e2 <__stack+0x83>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
 4c0:	22 23       	and	r18, r18
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__stack+0x67>
 4c4:	5b c0       	rjmp	.+182    	; 0x57c <__stack+0x11d>
 4c6:	31 38       	cpi	r19, 0x81	; 129
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__stack+0x6d>
 4ca:	58 c0       	rjmp	.+176    	; 0x57c <__stack+0x11d>
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <__stack+0x75>
 4d0:	8e e1       	ldi	r24, 0x1E	; 30
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	8a e5       	ldi	r24, 0x5A	; 90
 4d6:	80 93 81 00 	sts	0x0081, r24
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 4da:	8b e4       	ldi	r24, 0x4B	; 75
 4dc:	80 93 82 00 	sts	0x0082, r24
 4e0:	4d c0       	rjmp	.+154    	; 0x57c <__stack+0x11d>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 4e2:	85 30       	cpi	r24, 0x05	; 5
 4e4:	19 f4       	brne	.+6      	; 0x4ec <__stack+0x8d>
        usbNewDeviceAddr = value;
 4e6:	20 93 93 00 	sts	0x0093, r18
 4ea:	48 c0       	rjmp	.+144    	; 0x57c <__stack+0x11d>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 4ec:	86 30       	cpi	r24, 0x06	; 6
 4ee:	79 f5       	brne	.+94     	; 0x54e <__stack+0xef>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__stack+0x9b>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	21 f4       	brne	.+8      	; 0x502 <__stack+0xa3>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 4fa:	ce 01       	movw	r24, r28
 4fc:	d9 d0       	rcall	.+434    	; 0x6b0 <usbFunctionDescriptor>
 4fe:	28 2f       	mov	r18, r24
 500:	22 c0       	rjmp	.+68     	; 0x546 <__stack+0xe7>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	f9 f4       	brne	.+62     	; 0x544 <__stack+0xe5>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 506:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 508:	88 23       	and	r24, r24
 50a:	41 f4       	brne	.+16     	; 0x51c <__stack+0xbd>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 50c:	86 e2       	ldi	r24, 0x26	; 38
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	90 93 91 00 	sts	0x0091, r25
 514:	80 93 90 00 	sts	0x0090, r24
 518:	24 e0       	ldi	r18, 0x04	; 4
 51a:	15 c0       	rjmp	.+42     	; 0x546 <__stack+0xe7>
        SWITCH_CASE(1)
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	41 f4       	brne	.+16     	; 0x530 <__stack+0xd1>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 520:	8a e2       	ldi	r24, 0x2A	; 42
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 91 00 	sts	0x0091, r25
 528:	80 93 90 00 	sts	0x0090, r24
 52c:	22 e2       	ldi	r18, 0x22	; 34
 52e:	0b c0       	rjmp	.+22     	; 0x546 <__stack+0xe7>
        SWITCH_CASE(2)
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	41 f4       	brne	.+16     	; 0x544 <__stack+0xe5>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 534:	8c e4       	ldi	r24, 0x4C	; 76
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 91 00 	sts	0x0091, r25
 53c:	80 93 90 00 	sts	0x0090, r24
 540:	26 e1       	ldi	r18, 0x16	; 22
 542:	01 c0       	rjmp	.+2      	; 0x546 <__stack+0xe7>
 544:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 546:	80 e4       	ldi	r24, 0x40	; 64
 548:	80 93 72 00 	sts	0x0072, r24
 54c:	1f c0       	rjmp	.+62     	; 0x58c <__stack+0x12d>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 54e:	88 30       	cpi	r24, 0x08	; 8
 550:	21 f4       	brne	.+8      	; 0x55a <__stack+0xfb>
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	85 e9       	ldi	r24, 0x95	; 149
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	14 c0       	rjmp	.+40     	; 0x582 <__stack+0x123>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 55a:	89 30       	cpi	r24, 0x09	; 9
 55c:	19 f4       	brne	.+6      	; 0x564 <__stack+0x105>
        usbConfiguration = value;
 55e:	20 93 95 00 	sts	0x0095, r18
 562:	09 c0       	rjmp	.+18     	; 0x576 <__stack+0x117>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 564:	8a 30       	cpi	r24, 0x0A	; 10
 566:	11 f4       	brne	.+4      	; 0x56c <__stack+0x10d>
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	09 c0       	rjmp	.+18     	; 0x57e <__stack+0x11f>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 56c:	8b 30       	cpi	r24, 0x0B	; 11
 56e:	31 f4       	brne	.+12     	; 0x57c <__stack+0x11d>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 570:	8b e4       	ldi	r24, 0x4B	; 75
 572:	80 93 82 00 	sts	0x0082, r24
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
 576:	8a e5       	ldi	r24, 0x5A	; 90
 578:	80 93 81 00 	sts	0x0081, r24
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	8f e7       	ldi	r24, 0x7F	; 127
 580:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 582:	90 93 91 00 	sts	0x0091, r25
 586:	80 93 90 00 	sts	0x0090, r24
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__stack+0x13f>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 58c:	2f 3f       	cpi	r18, 0xFF	; 255
 58e:	39 f4       	brne	.+14     	; 0x59e <__stack+0x13f>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 590:	88 81       	ld	r24, Y
 592:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 594:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	80 93 72 00 	sts	0x0072, r24
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <__stack+0x14b>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 59e:	8f 81       	ldd	r24, Y+7	; 0x07
 5a0:	88 23       	and	r24, r24
 5a2:	19 f4       	brne	.+6      	; 0x5aa <__stack+0x14b>
 5a4:	8e 81       	ldd	r24, Y+6	; 0x06
 5a6:	82 17       	cp	r24, r18
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__stack+0x14d>
 5aa:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 5ac:	80 93 61 00 	sts	0x0061, r24
 5b0:	10 c0       	rjmp	.+32     	; 0x5d2 <__stack+0x173>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 5b2:	80 91 72 00 	lds	r24, 0x0072
 5b6:	87 ff       	sbrs	r24, 7
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <__stack+0x173>
            uchar rval = usbFunctionWrite(data, len);
 5ba:	ce 01       	movw	r24, r28
 5bc:	a4 d0       	rcall	.+328    	; 0x706 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 5be:	8f 3f       	cpi	r24, 0xFF	; 255
 5c0:	21 f4       	brne	.+8      	; 0x5ca <__stack+0x16b>
                usbTxLen = USBPID_STALL;
 5c2:	8e e1       	ldi	r24, 0x1E	; 30
 5c4:	80 93 60 00 	sts	0x0060, r24
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__stack+0x173>
            }else if(rval != 0){    /* This was the final package */
 5ca:	88 23       	and	r24, r24
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__stack+0x173>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 5ce:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 5d2:	10 92 92 00 	sts	0x0092, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 5d6:	80 91 60 00 	lds	r24, 0x0060
 5da:	84 ff       	sbrs	r24, 4
 5dc:	58 c0       	rjmp	.+176    	; 0x68e <__stack+0x22f>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 5de:	80 91 61 00 	lds	r24, 0x0061
 5e2:	8f 3f       	cpi	r24, 0xFF	; 255
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <__stack+0x189>
 5e6:	53 c0       	rjmp	.+166    	; 0x68e <__stack+0x22f>
 5e8:	18 2f       	mov	r17, r24
 5ea:	89 30       	cpi	r24, 0x09	; 9
 5ec:	08 f0       	brcs	.+2      	; 0x5f0 <__stack+0x191>
 5ee:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 5f0:	81 1b       	sub	r24, r17
 5f2:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 5f6:	80 91 76 00 	lds	r24, 0x0076
 5fa:	98 e8       	ldi	r25, 0x88	; 136
 5fc:	89 27       	eor	r24, r25
 5fe:	80 93 76 00 	sts	0x0076, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 602:	11 23       	and	r17, r17
 604:	91 f1       	breq	.+100    	; 0x66a <__stack+0x20b>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 606:	80 91 72 00 	lds	r24, 0x0072
 60a:	87 ff       	sbrs	r24, 7
 60c:	08 c0       	rjmp	.+16     	; 0x61e <__stack+0x1bf>
            len = usbFunctionRead(data, len);
 60e:	87 e7       	ldi	r24, 0x77	; 119
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	61 2f       	mov	r22, r17
 614:	6e d0       	rcall	.+220    	; 0x6f2 <usbFunctionRead>
 616:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 618:	89 30       	cpi	r24, 0x09	; 9
 61a:	98 f5       	brcc	.+102    	; 0x682 <__stack+0x223>
 61c:	26 c0       	rjmp	.+76     	; 0x66a <__stack+0x20b>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 61e:	20 91 90 00 	lds	r18, 0x0090
 622:	30 91 91 00 	lds	r19, 0x0091
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 626:	86 ff       	sbrs	r24, 6
 628:	0d c0       	rjmp	.+26     	; 0x644 <__stack+0x1e5>
 62a:	a7 e7       	ldi	r26, 0x77	; 119
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 632:	f9 01       	movw	r30, r18
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 63a:	ed 93       	st	X+, r30
 63c:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 63e:	18 17       	cp	r17, r24
 640:	c1 f7       	brne	.-16     	; 0x632 <__stack+0x1d3>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__stack+0x1f5>
 644:	91 2f       	mov	r25, r17
 646:	d9 01       	movw	r26, r18
 648:	e7 e7       	ldi	r30, 0x77	; 119
 64a:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 64c:	8d 91       	ld	r24, X+
 64e:	81 93       	st	Z+, r24
                }while(--i);
 650:	91 50       	subi	r25, 0x01	; 1
 652:	e1 f7       	brne	.-8      	; 0x64c <__stack+0x1ed>
 654:	11 50       	subi	r17, 0x01	; 1
 656:	81 2f       	mov	r24, r17
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	1f 5f       	subi	r17, 0xFF	; 255
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	82 0f       	add	r24, r18
 660:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 662:	90 93 91 00 	sts	0x0091, r25
 666:	80 93 90 00 	sts	0x0090, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 66a:	87 e7       	ldi	r24, 0x77	; 119
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	61 2f       	mov	r22, r17
 670:	6b dd       	rcall	.-1322   	; 0x148 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 672:	61 2f       	mov	r22, r17
 674:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 676:	6c 30       	cpi	r22, 0x0C	; 12
 678:	41 f0       	breq	.+16     	; 0x68a <__stack+0x22b>
            usbMsgLen = USB_NO_MSG;
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	80 93 61 00 	sts	0x0061, r24
 680:	04 c0       	rjmp	.+8      	; 0x68a <__stack+0x22b>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	80 93 61 00 	sts	0x0061, r24
 688:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 68a:	60 93 60 00 	sts	0x0060, r22
 68e:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 690:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 692:	8c 70       	andi	r24, 0x0C	; 12
 694:	49 f4       	brne	.+18     	; 0x6a8 <__stack+0x249>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 696:	91 50       	subi	r25, 0x01	; 1
 698:	d9 f7       	brne	.-10     	; 0x690 <__stack+0x231>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 69a:	10 92 93 00 	sts	0x0093, r1
    usbDeviceAddr = 0;
 69e:	10 92 8d 00 	sts	0x008D, r1
}

static inline void  usbResetStall(void)
{
#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
        usbTxLen1 = USBPID_NAK;
 6a2:	8a e5       	ldi	r24, 0x5A	; 90
 6a4:	80 93 81 00 	sts	0x0081, r24
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	08 95       	ret

000006b0 <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t * rq)
{

	if (rq->wValue.bytes[1] == USBDESCR_DEVICE) {
 6b0:	fc 01       	movw	r30, r24
 6b2:	83 81       	ldd	r24, Z+3	; 0x03
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <usbFunctionDescriptor+0x18>
		usbMsgPtr = (uchar *) deviceDescrMIDI;
 6b8:	8f e6       	ldi	r24, 0x6F	; 111
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 91 00 	sts	0x0091, r25
 6c0:	80 93 90 00 	sts	0x0090, r24
 6c4:	82 e1       	ldi	r24, 0x12	; 18
 6c6:	08 95       	ret
		return sizeof(deviceDescrMIDI);
	} else {		/* must be config descriptor */
		usbMsgPtr = (uchar *) configDescrMIDI;
 6c8:	81 e8       	ldi	r24, 0x81	; 129
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	90 93 91 00 	sts	0x0091, r25
 6d0:	80 93 90 00 	sts	0x0090, r24
 6d4:	85 e6       	ldi	r24, 0x65	; 101
		return sizeof(configDescrMIDI);
	}
}
 6d6:	08 95       	ret

000006d8 <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
 6d8:	fc 01       	movw	r30, r24
	usbRequest_t *rq = (void *) data;

	// DEBUG LED
	//PORTC ^= 0x01;

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {	/* class request type */
 6da:	e0 81       	ld	r30, Z
 6dc:	8e 2f       	mov	r24, r30
 6de:	80 76       	andi	r24, 0x60	; 96
 6e0:	80 32       	cpi	r24, 0x20	; 32
 6e2:	29 f4       	brne	.+10     	; 0x6ee <usbFunctionSetup+0x16>

		/*  Prepare bulk-in endpoint to respond to early termination   */
		if ((rq->bmRequestType & USBRQ_DIR_MASK) ==
 6e4:	e7 fd       	sbrc	r30, 7
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <usbFunctionSetup+0x16>
		    USBRQ_DIR_HOST_TO_DEVICE)
			sendEmptyFrame = 1;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	80 93 75 00 	sts	0x0075, r24
	}

	return 0xff;
}
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	08 95       	ret

000006f2 <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                           */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead(uchar * data, uchar len)
{
 6f2:	fc 01       	movw	r30, r24
	// DEBUG LED
	//PORTC ^= 0x02;

	data[0] = 0;
 6f4:	10 82       	st	Z, r1
	data[1] = 0;
 6f6:	11 82       	std	Z+1, r1	; 0x01
	data[2] = 0;
 6f8:	12 82       	std	Z+2, r1	; 0x02
	data[3] = 0;
 6fa:	13 82       	std	Z+3, r1	; 0x03
	data[4] = 0;
 6fc:	14 82       	std	Z+4, r1	; 0x04
	data[5] = 0;
 6fe:	15 82       	std	Z+5, r1	; 0x05
	data[6] = 0;
 700:	16 82       	std	Z+6, r1	; 0x06

	return 7;
}
 702:	87 e0       	ldi	r24, 0x07	; 7
 704:	08 95       	ret

00000706 <usbFunctionWrite>:
uchar usbFunctionWrite(uchar * data, uchar len)
{
	// DEBUG LED
	//PORTC ^= 0x04;
	return 1;
}
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	08 95       	ret

0000070a <usbFunctionWriteOut>:

void usbFunctionWriteOut(uchar * data, uchar len)
{
	// DEBUG LED
	//PORTC ^= 0x20;
}
 70a:	08 95       	ret

0000070c <adc>:

int adc(uchar adctouse)
{
    int ADCval;

    ADMUX = adctouse;         // use #1 ADC
 70c:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1 << REFS0);    // use AVcc as the reference
 70e:	3e 9a       	sbi	0x07, 6	; 7
    ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 710:	3d 98       	cbi	0x07, 5	; 7

    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 712:	86 b1       	in	r24, 0x06	; 6
 714:	87 60       	ori	r24, 0x07	; 7
 716:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1 << ADEN);    // Enable the ADC
 718:	37 9a       	sbi	0x06, 7	; 6

    ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 71a:	36 9a       	sbi	0x06, 6	; 6

    while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish 
 71c:	36 99       	sbic	0x06, 6	; 6
 71e:	fe cf       	rjmp	.-4      	; 0x71c <adc+0x10>


    ADCval = ADCL;
 720:	94 b1       	in	r25, 0x04	; 4
    ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 722:	85 b1       	in	r24, 0x05	; 5
 724:	38 2f       	mov	r19, r24
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	29 0f       	add	r18, r25
 72a:	31 1d       	adc	r19, r1

    return ADCval;
}
 72c:	c9 01       	movw	r24, r18
 72e:	08 95       	ret

00000730 <mutematrix>:



void mutematrix(){
DDRC=0;
 730:	14 ba       	out	0x14, r1	; 20
	  PORTC=0xFF;
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	85 bb       	out	0x15, r24	; 21
	      DDRB=0;
 736:	17 ba       	out	0x17, r1	; 23
      PORTB=0xFF;  
 738:	88 bb       	out	0x18, r24	; 24

}
 73a:	08 95       	ret

0000073c <scanKeys>:
/*---------------------------------------------------------------------------*/
/* scanKeys()                                                                */
/* Reads keys status and put the key pressed in a buffer                     */
/*---------------------------------------------------------------------------*/

uint8_t scanKeys(uint8_t* notes,uint8_t size){
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
 74a:	16 2f       	mov	r17, r22
  uint8_t count=0;
  uint8_t key=1;
	uchar data, col;
	int i,j;
  memset(notes,0,size);
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	41 2f       	mov	r20, r17
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	b7 d1       	rcall	.+878    	; 0xac4 <memset>
}



void mutematrix(){
DDRC=0;
 756:	14 ba       	out	0x14, r1	; 20
	  PORTC=0xFF;
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	85 bb       	out	0x15, r24	; 21
	      DDRB=0;
 75c:	17 ba       	out	0x17, r1	; 23
      PORTB=0xFF;  
 75e:	88 bb       	out	0x18, r24	; 24
 760:	a0 e0       	ldi	r26, 0x00	; 0
 762:	b1 e0       	ldi	r27, 0x01	; 1
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	70 e0       	ldi	r23, 0x00	; 0
      data=pgm_read_byte(&modmask[i]);
      DDRB=data;
      PORTB&=~data;
    } else { // 3 extra rows are on PORTB
      DDRB=0;
      PORTB=0xFF;
 768:	0f ef       	ldi	r16, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 76a:	80 e3       	ldi	r24, 0x30	; 48
 76c:	e8 2e       	mov	r14, r24
 76e:	85 e7       	ldi	r24, 0x75	; 117
 770:	f8 2e       	mov	r15, r24
	int i,j;
  memset(notes,0,size);
 				mutematrix();

  for(i=0;i<8;i++){
     if (i<6) {//set row line
 772:	66 30       	cpi	r22, 0x06	; 6
 774:	71 05       	cpc	r23, r1
 776:	64 f4       	brge	.+24     	; 0x790 <scanKeys+0x54>
	  DDRC=0;
 778:	14 ba       	out	0x14, r1	; 20
	  PORTC=0xFF;
 77a:	05 bb       	out	0x15, r16	; 21
      data=pgm_read_byte(&modmask[i]);
 77c:	fb 01       	movw	r30, r22
 77e:	ee 59       	subi	r30, 0x9E	; 158
 780:	ff 4f       	sbci	r31, 0xFF	; 255
 782:	e4 91       	lpm	r30, Z+
      DDRB=data;
 784:	e7 bb       	out	0x17, r30	; 23
      PORTB&=~data;
 786:	88 b3       	in	r24, 0x18	; 24
 788:	e0 95       	com	r30
 78a:	e8 23       	and	r30, r24
 78c:	e8 bb       	out	0x18, r30	; 24
 78e:	0b c0       	rjmp	.+22     	; 0x7a6 <scanKeys+0x6a>
    } else { // 3 extra rows are on PORTB
      DDRB=0;
 790:	17 ba       	out	0x17, r1	; 23
      PORTB=0xFF;
 792:	08 bb       	out	0x18, r16	; 24
      data=pgm_read_byte(&extrows[i-6]);
 794:	fb 01       	movw	r30, r22
 796:	ee 59       	subi	r30, 0x9E	; 158
 798:	ff 4f       	sbci	r31, 0xFF	; 255
 79a:	e4 91       	lpm	r30, Z+
      DDRC=data;
 79c:	e4 bb       	out	0x14, r30	; 20
      PORTC&=~data;
 79e:	85 b3       	in	r24, 0x15	; 21
 7a0:	e0 95       	com	r30
 7a2:	e8 23       	and	r30, r24
 7a4:	e5 bb       	out	0x15, r30	; 21
 7a6:	c7 01       	movw	r24, r14
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <scanKeys+0x6c>
 7ac:	4a e6       	ldi	r20, 0x6A	; 106
 7ae:	50 e0       	ldi	r21, 0x00	; 0
    }
    _delay_ms(10);//without this it would glitch
	
    for(j=0;j<5;j++){
		col = pgm_read_byte(&columns[j]);
 7b0:	fa 01       	movw	r30, r20
 7b2:	24 91       	lpm	r18, Z+
      if(~PIND&(col)){
 7b4:	80 b3       	in	r24, 0x10	; 16
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	80 95       	com	r24
 7bc:	90 95       	com	r25
 7be:	28 23       	and	r18, r24
 7c0:	39 23       	and	r19, r25
 7c2:	23 2b       	or	r18, r19
 7c4:	39 f0       	breq	.+14     	; 0x7d4 <scanKeys+0x98>
        notes[count]=key;
 7c6:	fe 01       	movw	r30, r28
 7c8:	ea 0f       	add	r30, r26
 7ca:	f1 1d       	adc	r31, r1
 7cc:	b0 83       	st	Z, r27
        count++;
 7ce:	af 5f       	subi	r26, 0xFF	; 255
        if (count==size) {
 7d0:	a1 17       	cp	r26, r17
 7d2:	69 f0       	breq	.+26     	; 0x7ee <scanKeys+0xb2>
				mutematrix();
					return count;
        }
      }
      key++;
 7d4:	bf 5f       	subi	r27, 0xFF	; 255
 7d6:	4f 5f       	subi	r20, 0xFF	; 255
 7d8:	5f 4f       	sbci	r21, 0xFF	; 255
      DDRC=data;
      PORTC&=~data;
    }
    _delay_ms(10);//without this it would glitch
	
    for(j=0;j<5;j++){
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	4f 36       	cpi	r20, 0x6F	; 111
 7de:	5f 07       	cpc	r21, r31
 7e0:	39 f7       	brne	.-50     	; 0x7b0 <scanKeys+0x74>
	uchar data, col;
	int i,j;
  memset(notes,0,size);
 				mutematrix();

  for(i=0;i<8;i++){
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	68 30       	cpi	r22, 0x08	; 8
 7e8:	71 05       	cpc	r23, r1
 7ea:	09 f0       	breq	.+2      	; 0x7ee <scanKeys+0xb2>
 7ec:	c2 cf       	rjmp	.-124    	; 0x772 <scanKeys+0x36>
}



void mutematrix(){
DDRC=0;
 7ee:	14 ba       	out	0x14, r1	; 20
	  PORTC=0xFF;
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	85 bb       	out	0x15, r24	; 21
	      DDRB=0;
 7f4:	17 ba       	out	0x17, r1	; 23
      PORTB=0xFF;  
 7f6:	88 bb       	out	0x18, r24	; 24
      key++;
    }
  }
				mutematrix();
	return count;
}
 7f8:	8a 2f       	mov	r24, r26
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	08 95       	ret

00000808 <main>:


int j=0;

int main(void)
{
 808:	2f 92       	push	r2
 80a:	3f 92       	push	r3
 80c:	4f 92       	push	r4
 80e:	5f 92       	push	r5
 810:	6f 92       	push	r6
 812:	7f 92       	push	r7
 814:	8f 92       	push	r8
 816:	9f 92       	push	r9
 818:	af 92       	push	r10
 81a:	bf 92       	push	r11
 81c:	cf 92       	push	r12
 81e:	df 92       	push	r13
 820:	ef 92       	push	r14
 822:	ff 92       	push	r15
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
 830:	e4 97       	sbiw	r28, 0x34	; 52
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61

	int adcOld[8] = { -1, -1, -1, -1, -1, -1, -1, -1 };
 83c:	de 01       	movw	r26, r28
 83e:	55 96       	adiw	r26, 0x15	; 21
 840:	e2 e6       	ldi	r30, 0x62	; 98
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 e1       	ldi	r24, 0x10	; 16
 846:	01 90       	ld	r0, Z+
 848:	0d 92       	st	X+, r0
 84a:	81 50       	subi	r24, 0x01	; 1
 84c:	e1 f7       	brne	.-8      	; 0x846 <main+0x3e>
	uchar midiMsg[16];
	uchar iii;
	uchar nA;
	uchar keys[10];
	uchar lastKeys[10];
	memset (keys,0,10);
 84e:	8a e0       	ldi	r24, 0x0A	; 10
 850:	fe 01       	movw	r30, r28
 852:	31 96       	adiw	r30, 0x01	; 1
 854:	df 01       	movw	r26, r30
 856:	98 2f       	mov	r25, r24
 858:	1d 92       	st	X+, r1
 85a:	9a 95       	dec	r25
 85c:	e9 f7       	brne	.-6      	; 0x858 <main+0x50>
	memset (lastKeys,0,10);
 85e:	fe 01       	movw	r30, r28
 860:	3b 96       	adiw	r30, 0x0b	; 11
 862:	df 01       	movw	r26, r30
 864:	1d 92       	st	X+, r1
 866:	8a 95       	dec	r24
 868:	e9 f7       	brne	.-6      	; 0x864 <main+0x5c>


	wdt_enable(WDTO_1S);
 86a:	2e e0       	ldi	r18, 0x0E	; 14
 86c:	88 e1       	ldi	r24, 0x18	; 24
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	a8 95       	wdr
 876:	81 bd       	out	0x21, r24	; 33
 878:	0f be       	out	0x3f, r0	; 63
 87a:	21 bd       	out	0x21, r18	; 33
static void hardwareInit(void)
{
	uchar i, j;

	/* activate pull-ups except on USB lines */
	USB_CFG_IOPORT =
 87c:	83 ef       	ldi	r24, 0xF3	; 243
 87e:	82 bb       	out	0x12, r24	; 18
	/* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT	/* use usbDeviceConnect()/usbDeviceDisconnect() if available */
	USBDDR = 0;		/* we do RESET by deactivating pullup */
	usbDeviceDisconnect();
#else
	USBDDR = (1 << USB_CFG_DMINUS_BIT) | (1 << USB_CFG_DPLUS_BIT);
 880:	8c e0       	ldi	r24, 0x0C	; 12
 882:	81 bb       	out	0x11, r24	; 17
		while (--i);	/* delay >10ms for USB reset */
	}
#ifdef USB_CFG_PULLUP_IOPORT
	usbDeviceConnect();
#else
	USBDDR = 0;		/*  remove USB reset condition */
 884:	11 ba       	out	0x11, r1	; 17
	// enable, prescaler = 2^6 (-> 12Mhz / 64 = 187.5 kHz)
	//
	
	//ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);

	PORTD = 0xff;   /* activate all pull-ups */
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	82 bb       	out	0x12, r24	; 18
	DDRD = 0;       /*pins input */
 88a:	11 ba       	out	0x11, r1	; 17

// keys/switches setup
// PORTB has eight keys (active low).
	PORTB = 0x00;		/* activate all pull-ups */
 88c:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xff;		/* all pins output */
 88e:	87 bb       	out	0x17, r24	; 23
// PORTC has eight (debug) LEDs (active low).
	PORTC = 0xff;		/* off */
 890:	85 bb       	out	0x15, r24	; 21
	DDRC = 0x0f;		/*  pins output */
 892:	8f e0       	ldi	r24, 0x0F	; 15
 894:	84 bb       	out	0x14, r24	; 20


	wdt_enable(WDTO_1S);
	hardwareInit();
	odDebugInit();
	usbInit();
 896:	99 dd       	rcall	.-1230   	; 0x3ca <usbInit>

	sendEmptyFrame = 0;
 898:	10 92 75 00 	sts	0x0075, r1

	sei();
 89c:	78 94       	sei
 89e:	04 e0       	ldi	r16, 0x04	; 4
 8a0:	f0 2e       	mov	r15, r16
	uchar keyPressed=0,keyReleased=0;
	for (;;) {		
		wdt_reset();
		usbPoll();
		int k,l;
		scanKeys(keys,10);
 8a2:	5e 01       	movw	r10, r28
 8a4:	08 94       	sec
 8a6:	a1 1c       	adc	r10, r1
 8a8:	b1 1c       	adc	r11, r1
 8aa:	1b e0       	ldi	r17, 0x0B	; 11
 8ac:	81 2e       	mov	r8, r17
 8ae:	91 2c       	mov	r9, r1
 8b0:	8c 0e       	add	r8, r28
 8b2:	9d 1e       	adc	r9, r29
				if(lastKeys[j]==keys[k]){
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
 8b4:	b5 e1       	ldi	r27, 0x15	; 21
 8b6:	6b 2e       	mov	r6, r27
 8b8:	71 2c       	mov	r7, r1
 8ba:	6c 0e       	add	r6, r28
 8bc:	7d 1e       	adc	r7, r29
					midiMsg[0] = 0x0b;
					midiMsg[1] = 0xb0;
					midiMsg[2] = channel + 70;	// cc 70..77 
					midiMsg[3] = value >> 3;
					sendEmptyFrame = 0;
					usbSetInterrupt(midiMsg, 4);
 8be:	a5 e2       	ldi	r26, 0x25	; 37
 8c0:	ca 2e       	mov	r12, r26
 8c2:	d1 2c       	mov	r13, r1
 8c4:	cc 0e       	add	r12, r28
 8c6:	dd 1e       	adc	r13, r29
					}
					if (keyPressed) {	
						midiMsg[iii++] = 0x09;
						midiMsg[iii++] = 0x90;
						midiMsg[iii++] = keys[j]+35;
						midiMsg[iii++] = 0x7f;
 8c8:	ff e7       	ldi	r31, 0x7F	; 127
 8ca:	3f 2e       	mov	r3, r31
					// DEBUG LED
					//PORTC ^= 0xff;
					
					adcOld[channel] = value;
					// MIDI CC msg
					midiMsg[0] = 0x0b;
 8cc:	eb e0       	ldi	r30, 0x0B	; 11
 8ce:	2e 2e       	mov	r2, r30
						midiMsg[iii++] = 0x90;
						midiMsg[iii++] = keys[j]+35;
						midiMsg[iii++] = 0x7f;
					}
					if (8 == iii)
						sendEmptyFrame = 1;
 8d0:	55 24       	eor	r5, r5
 8d2:	53 94       	inc	r5
					// For description of USB MIDI msg see:
					// http://www.usb.org/developers/devclass_docs/midi10.pdf
					// 4. USB MIDI Event Packets
					iii = 0;
					if (keyReleased) {	
						midiMsg[iii++] = 0x08;
 8d4:	78 e0       	ldi	r23, 0x08	; 8
 8d6:	47 2e       	mov	r4, r23
						midiMsg[iii++] = 0x80;
 8d8:	60 e8       	ldi	r22, 0x80	; 128
 8da:	e6 2e       	mov	r14, r22
	sei();


	uchar keyPressed=0,keyReleased=0;
	for (;;) {		
		wdt_reset();
 8dc:	a8 95       	wdr
		usbPoll();
 8de:	a8 dd       	rcall	.-1200   	; 0x430 <usbPoll>
		int k,l;
		scanKeys(keys,10);
 8e0:	c5 01       	movw	r24, r10
 8e2:	6a e0       	ldi	r22, 0x0A	; 10
 8e4:	2b df       	rcall	.-426    	; 0x73c <scanKeys>


		for(j=0;j<10;j++){
 8e6:	10 92 74 00 	sts	0x0074, r1
 8ea:	10 92 73 00 	sts	0x0073, r1
 8ee:	a2 c0       	rjmp	.+324    	; 0xa34 <main+0x22c>
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
				if(lastKeys[j]==keys[k]){
 8f0:	8c 91       	ld	r24, X
 8f2:	e8 17       	cp	r30, r24
 8f4:	11 f4       	brne	.+4      	; 0x8fa <main+0xf2>
 8f6:	00 e0       	ldi	r16, 0x00	; 0
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <main+0xfc>
 8fa:	11 96       	adiw	r26, 0x01	; 1


		for(j=0;j<10;j++){
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
 8fc:	a8 15       	cp	r26, r8
 8fe:	b9 05       	cpc	r27, r9
 900:	b9 f7       	brne	.-18     	; 0x8f0 <main+0xe8>
 902:	01 e0       	ldi	r16, 0x01	; 1
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
				if(keys[j]==lastKeys[l]){
 904:	2a 0d       	add	r18, r10
 906:	3b 1d       	adc	r19, r11
 908:	f9 01       	movw	r30, r18
 90a:	90 81       	ld	r25, Z
 90c:	f4 01       	movw	r30, r8
 90e:	80 81       	ld	r24, Z
 910:	98 17       	cp	r25, r24
 912:	11 f4       	brne	.+4      	; 0x918 <main+0x110>
 914:	10 e0       	ldi	r17, 0x00	; 0
 916:	08 c0       	rjmp	.+16     	; 0x928 <main+0x120>
 918:	31 96       	adiw	r30, 0x01	; 1
				if(lastKeys[j]==keys[k]){
						keyReleased=0;
					break;
				}
			}
			for(l=0;l<10;l++){
 91a:	e6 15       	cp	r30, r6
 91c:	f7 05       	cpc	r31, r7
 91e:	b9 f7       	brne	.-18     	; 0x90e <main+0x106>
 920:	11 e0       	ldi	r17, 0x01	; 1
 922:	02 c0       	rjmp	.+4      	; 0x928 <main+0x120>
				if(keys[j]==lastKeys[l]){
						keyPressed=0;
					break;
				}
			}
			while(!usbInterruptIsReady()){		wdt_reset();
 924:	a8 95       	wdr
		usbPoll();};
 926:	84 dd       	rcall	.-1272   	; 0x430 <usbPoll>
				if(keys[j]==lastKeys[l]){
						keyPressed=0;
					break;
				}
			}
			while(!usbInterruptIsReady()){		wdt_reset();
 928:	80 91 81 00 	lds	r24, 0x0081
 92c:	84 ff       	sbrs	r24, 4
 92e:	fa cf       	rjmp	.-12     	; 0x924 <main+0x11c>
		usbPoll();};
			if (usbInterruptIsReady()) {
 930:	80 91 81 00 	lds	r24, 0x0081
 934:	84 ff       	sbrs	r24, 4
 936:	75 c0       	rjmp	.+234    	; 0xa22 <main+0x21a>
				if (keyPressed|keyReleased) {
 938:	81 2f       	mov	r24, r17
 93a:	80 2b       	or	r24, r16
 93c:	e1 f1       	breq	.+120    	; 0x9b6 <main+0x1ae>
					// up to two midi events in one midi msg.
					// For description of USB MIDI msg see:
					// http://www.usb.org/developers/devclass_docs/midi10.pdf
					// 4. USB MIDI Event Packets
					iii = 0;
					if (keyReleased) {	
 93e:	00 23       	and	r16, r16
 940:	11 f4       	brne	.+4      	; 0x946 <main+0x13e>
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	0d c0       	rjmp	.+26     	; 0x960 <main+0x158>
						midiMsg[iii++] = 0x08;
 946:	4d a2       	std	Y+37, r4	; 0x25
						midiMsg[iii++] = 0x80;
 948:	ee a2       	std	Y+38, r14	; 0x26
						midiMsg[iii++] = lastKeys[j]+35;
 94a:	e0 91 73 00 	lds	r30, 0x0073
 94e:	f0 91 74 00 	lds	r31, 0x0074
 952:	e8 0d       	add	r30, r8
 954:	f9 1d       	adc	r31, r9
 956:	80 81       	ld	r24, Z
 958:	8d 5d       	subi	r24, 0xDD	; 221
 95a:	8f a3       	std	Y+39, r24	; 0x27
						midiMsg[iii++] = 0x00;
 95c:	18 a6       	std	Y+40, r1	; 0x28
 95e:	64 e0       	ldi	r22, 0x04	; 4
					}
					if (keyPressed) {	
 960:	11 23       	and	r17, r17
 962:	21 f1       	breq	.+72     	; 0x9ac <main+0x1a4>
						midiMsg[iii++] = 0x09;
 964:	f6 01       	movw	r30, r12
 966:	e6 0f       	add	r30, r22
 968:	f1 1d       	adc	r31, r1
 96a:	89 e0       	ldi	r24, 0x09	; 9
 96c:	80 83       	st	Z, r24
 96e:	96 2f       	mov	r25, r22
 970:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = 0x90;
 972:	f6 01       	movw	r30, r12
 974:	e9 0f       	add	r30, r25
 976:	f1 1d       	adc	r31, r1
 978:	a0 e9       	ldi	r26, 0x90	; 144
 97a:	a0 83       	st	Z, r26
 97c:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = keys[j]+35;
 97e:	d6 01       	movw	r26, r12
 980:	a9 0f       	add	r26, r25
 982:	b1 1d       	adc	r27, r1
 984:	e0 91 73 00 	lds	r30, 0x0073
 988:	f0 91 74 00 	lds	r31, 0x0074
 98c:	ea 0d       	add	r30, r10
 98e:	fb 1d       	adc	r31, r11
 990:	80 81       	ld	r24, Z
 992:	8d 5d       	subi	r24, 0xDD	; 221
 994:	8c 93       	st	X, r24
 996:	9f 5f       	subi	r25, 0xFF	; 255
						midiMsg[iii++] = 0x7f;
 998:	f6 01       	movw	r30, r12
 99a:	e9 0f       	add	r30, r25
 99c:	f1 1d       	adc	r31, r1
 99e:	30 82       	st	Z, r3
 9a0:	6c 5f       	subi	r22, 0xFC	; 252
					}
					if (8 == iii)
 9a2:	68 30       	cpi	r22, 0x08	; 8
 9a4:	19 f4       	brne	.+6      	; 0x9ac <main+0x1a4>
						sendEmptyFrame = 1;
 9a6:	50 92 75 00 	sts	0x0075, r5
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <main+0x1a8>
					else
						sendEmptyFrame = 0;
 9ac:	10 92 75 00 	sts	0x0075, r1
					usbSetInterrupt(midiMsg, iii);
 9b0:	c6 01       	movw	r24, r12
 9b2:	18 dd       	rcall	.-1488   	; 0x3e4 <usbSetInterrupt>
 9b4:	35 c0       	rjmp	.+106    	; 0xa20 <main+0x218>
		//usbPoll();
				}
				else{

					// if no key event check analog input
				value = (adc(channel)+adc(channel))/2;	// 0..1023
 9b6:	8f 2d       	mov	r24, r15
 9b8:	a9 de       	rcall	.-686    	; 0x70c <adc>
 9ba:	8c 01       	movw	r16, r24
 9bc:	8f 2d       	mov	r24, r15
 9be:	a6 de       	rcall	.-692    	; 0x70c <adc>
 9c0:	80 0f       	add	r24, r16
 9c2:	91 1f       	adc	r25, r17
 9c4:	62 e0       	ldi	r22, 0x02	; 2
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	56 d0       	rcall	.+172    	; 0xa76 <__divmodhi4>
 9ca:	9b 01       	movw	r18, r22
				// hysteresis
				if (adcOld[channel] - value > 7
 9cc:	ef 2d       	mov	r30, r15
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	ea 0d       	add	r30, r10
 9d6:	fb 1d       	adc	r31, r11
 9d8:	84 89       	ldd	r24, Z+20	; 0x14
 9da:	95 89       	ldd	r25, Z+21	; 0x15
 9dc:	86 1b       	sub	r24, r22
 9de:	97 0b       	sbc	r25, r23
 9e0:	07 96       	adiw	r24, 0x07	; 7
 9e2:	0f 97       	sbiw	r24, 0x0f	; 15
 9e4:	a8 f0       	brcs	.+42     	; 0xa10 <main+0x208>
				    || adcOld[channel] - value < -7) {
					// DEBUG LED
					//PORTC ^= 0xff;
					
					adcOld[channel] = value;
 9e6:	75 8b       	std	Z+21, r23	; 0x15
 9e8:	64 8b       	std	Z+20, r22	; 0x14
					// MIDI CC msg
					midiMsg[0] = 0x0b;
 9ea:	2d a2       	std	Y+37, r2	; 0x25
					midiMsg[1] = 0xb0;
 9ec:	b0 eb       	ldi	r27, 0xB0	; 176
 9ee:	be a3       	std	Y+38, r27	; 0x26
					midiMsg[2] = channel + 70;	// cc 70..77 
 9f0:	e6 e4       	ldi	r30, 0x46	; 70
 9f2:	fe 0e       	add	r15, r30
 9f4:	ff a2       	std	Y+39, r15	; 0x27
 9f6:	fa eb       	ldi	r31, 0xBA	; 186
 9f8:	ff 0e       	add	r15, r31
					midiMsg[3] = value >> 3;
 9fa:	43 e0       	ldi	r20, 0x03	; 3
 9fc:	35 95       	asr	r19
 9fe:	27 95       	ror	r18
 a00:	4a 95       	dec	r20
 a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0x1f4>
 a04:	28 a7       	std	Y+40, r18	; 0x28
					sendEmptyFrame = 0;
 a06:	10 92 75 00 	sts	0x0075, r1
					usbSetInterrupt(midiMsg, 4);
 a0a:	c6 01       	movw	r24, r12
 a0c:	64 e0       	ldi	r22, 0x04	; 4
 a0e:	ea dc       	rcall	.-1580   	; 0x3e4 <usbSetInterrupt>
						//	wdt_reset();
						
		
				}
				channel++;
 a10:	f3 94       	inc	r15
				channel &= 0x07;
 a12:	87 e0       	ldi	r24, 0x07	; 7
 a14:	f8 22       	and	r15, r24
				if (channel>5)					channel = 2;
 a16:	95 e0       	ldi	r25, 0x05	; 5
 a18:	9f 15       	cp	r25, r15
 a1a:	10 f4       	brcc	.+4      	; 0xa20 <main+0x218>
 a1c:	92 e0       	ldi	r25, 0x02	; 2
 a1e:	f9 2e       	mov	r15, r25
				
				}
				usbPoll();
 a20:	07 dd       	rcall	.-1522   	; 0x430 <usbPoll>
		usbPoll();
		int k,l;
		scanKeys(keys,10);


		for(j=0;j<10;j++){
 a22:	80 91 73 00 	lds	r24, 0x0073
 a26:	90 91 74 00 	lds	r25, 0x0074
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	90 93 74 00 	sts	0x0074, r25
 a30:	80 93 73 00 	sts	0x0073, r24
 a34:	20 91 73 00 	lds	r18, 0x0073
 a38:	30 91 74 00 	lds	r19, 0x0074
 a3c:	2a 30       	cpi	r18, 0x0A	; 10
 a3e:	31 05       	cpc	r19, r1
 a40:	34 f4       	brge	.+12     	; 0xa4e <main+0x246>
			keyPressed=1;
			keyReleased=1;
			for(k=0;k<10;k++){//can be reduced
				if(lastKeys[j]==keys[k]){
 a42:	f4 01       	movw	r30, r8
 a44:	e2 0f       	add	r30, r18
 a46:	f3 1f       	adc	r31, r19
 a48:	e0 81       	ld	r30, Z
 a4a:	d5 01       	movw	r26, r10
 a4c:	51 cf       	rjmp	.-350    	; 0x8f0 <main+0xe8>
 a4e:	d5 01       	movw	r26, r10
 a50:	f4 01       	movw	r30, r8
 a52:	20 e0       	ldi	r18, 0x00	; 0
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <main+0x258>
				usbPoll();
			}

		}
		//if(j>9){
		for(j=0;j<10;j++)			lastKeys[j]=keys[j];
 a58:	8d 91       	ld	r24, X+
 a5a:	81 93       	st	Z+, r24
 a5c:	2f 5f       	subi	r18, 0xFF	; 255
 a5e:	3f 4f       	sbci	r19, 0xFF	; 255
 a60:	2a 30       	cpi	r18, 0x0A	; 10
 a62:	31 05       	cpc	r19, r1
 a64:	cc f3       	brlt	.-14     	; 0xa58 <main+0x250>
 a66:	30 93 74 00 	sts	0x0074, r19
 a6a:	20 93 73 00 	sts	0x0073, r18
		//j=0;}
							PORTC ^= 0xff;
 a6e:	85 b3       	in	r24, 0x15	; 21
 a70:	80 95       	com	r24
 a72:	85 bb       	out	0x15, r24	; 21
 a74:	33 cf       	rjmp	.-410    	; 0x8dc <main+0xd4>

00000a76 <__divmodhi4>:
 a76:	97 fb       	bst	r25, 7
 a78:	09 2e       	mov	r0, r25
 a7a:	07 26       	eor	r0, r23
 a7c:	0a d0       	rcall	.+20     	; 0xa92 <__divmodhi4_neg1>
 a7e:	77 fd       	sbrc	r23, 7
 a80:	04 d0       	rcall	.+8      	; 0xa8a <__divmodhi4_neg2>
 a82:	0c d0       	rcall	.+24     	; 0xa9c <__udivmodhi4>
 a84:	06 d0       	rcall	.+12     	; 0xa92 <__divmodhi4_neg1>
 a86:	00 20       	and	r0, r0
 a88:	1a f4       	brpl	.+6      	; 0xa90 <__divmodhi4_exit>

00000a8a <__divmodhi4_neg2>:
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a90 <__divmodhi4_exit>:
 a90:	08 95       	ret

00000a92 <__divmodhi4_neg1>:
 a92:	f6 f7       	brtc	.-4      	; 0xa90 <__divmodhi4_exit>
 a94:	90 95       	com	r25
 a96:	81 95       	neg	r24
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	08 95       	ret

00000a9c <__udivmodhi4>:
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	51 e1       	ldi	r21, 0x11	; 17
 aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__udivmodhi4_ep>

00000aa4 <__udivmodhi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	a6 17       	cp	r26, r22
 aaa:	b7 07       	cpc	r27, r23
 aac:	10 f0       	brcs	.+4      	; 0xab2 <__udivmodhi4_ep>
 aae:	a6 1b       	sub	r26, r22
 ab0:	b7 0b       	sbc	r27, r23

00000ab2 <__udivmodhi4_ep>:
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	5a 95       	dec	r21
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__udivmodhi4_loop>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	bc 01       	movw	r22, r24
 ac0:	cd 01       	movw	r24, r26
 ac2:	08 95       	ret

00000ac4 <memset>:
 ac4:	dc 01       	movw	r26, r24
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <memset+0x6>
 ac8:	6d 93       	st	X+, r22
 aca:	41 50       	subi	r20, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	e0 f7       	brcc	.-8      	; 0xac8 <memset+0x4>
 ad0:	08 95       	ret

00000ad2 <_exit>:
 ad2:	f8 94       	cli

00000ad4 <__stop_program>:
 ad4:	ff cf       	rjmp	.-2      	; 0xad4 <__stop_program>
